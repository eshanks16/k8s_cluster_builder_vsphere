---
- import_tasks: redhat.yml
  when: ansible_os_family == "RedHat"

- name: Ensures /etc/kubernetes/audit dir exists
  file: path=/etc/kubernetes/audit state=directory

- name: Set audit config
  template:
    dest: /etc/kubernetes/audit/audit.yaml
    src: etc/kubernetes/audit/audit.yaml

- name: determine whether kubeadm needs to be run
  stat:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    get_checksum: False
    get_mime: False
  register: kubeadm_apiserver_manifest

- name: run kubeadm init on primary control plane node
  shell: "/usr/bin/kubeadm init --config=/etc/kubernetes/kubeadm.conf --upload-certs --ignore-preflight-errors=all"
  delegate_to: "{{ groups['k8s_master_primary']|first }}"
  run_once: true
  when: kubeadm_apiserver_manifest.stat.exists == False

- name: slurp the ca certificate and key
  slurp:
    src: "/etc/kubernetes/pki/{{ item }}"
  with_items:
    - apiserver-etcd-client.crt
    - apiserver-etcd-client.key
    - apiserver.crt
    - apiserver.key
    - apiserver-kubelet-client.crt
    - apiserver-kubelet-client.key
    - ca.crt
    - ca.key
    - front-proxy-ca.crt
    - front-proxy-ca.key
    - front-proxy-client.crt
    - front-proxy-client.key
    - sa.key
    - sa.pub
  register: kube_pki
  delegate_to: "{{ groups['k8s_master_primary']|first }}"
  run_once: true

- name: create kubernetes pki directory
  file:
    dest: /etc/kubernetes/pki/
    state: directory
    owner: root
    group: root

- name: add kube pki assets
  no_log: True
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0744
  with_items: "{{ kube_pki.results }}"
  when: inventory_hostname != groups['k8s_master_primary']|first

#Initialize the secondary control plane nodes
- name: initialize secondary control plane nodes
  command: "/usr/bin/kubeadm init --config=/etc/kubernetes/kubeadm.conf --ignore-preflight-errors=all"
  when: kubeadm_apiserver_manifest.stat.exists == False and inventory_hostname != groups['k8s_master_primary']|first


#Create KUBECONFIG info
- name: create .kube directories in user's home
  file:
    path: "{{ item.home }}/.kube"
    state: absent
  with_items: "{{ kubernetes_users }}"

- name: create .kube directories in user's home
  file:
    path: "{{ item.home }}/.kube"
    state: directory
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0755
  with_items: "{{ kubernetes_users }}"

- name: setup the kubeconfig
  copy:
    remote_src: True
    src: /etc/kubernetes/admin.conf
    dest: "{{ item.home }}/.kube/config"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: 0600
  with_items: "{{ kubernetes_users }}"

- name: configure bash completion
  lineinfile:
    path: "{{ item.home }}/.bashrc"
    line: "source <(kubectl completion bash)"
  with_items: "{{ kubernetes_users }}"
